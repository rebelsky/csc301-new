- topic: An introduction to the course
  abbrev: course-intro
  summary: We begin to consider the core ideas of the course.
  subjects:
    - Course goals
    - Course format
  notes: ../eboards/eboard01

- topic: An introduction to the course, continued
  abbrev: course-intro-continued
  summary: We continue our introduction to the course.
  subjects:
    - Approaching algorithms
    - Testing priority queues
    - Heaps, continued
    - "Problem: Getting from here to there"
    - "Problem: Optimal soldering plans"
    - "Problem: Scheduling overlapping tasks"
  notes: ../eboards/eboard02

- topic: Asymptotic analysis
  abbrev: asymptotic-analysis
  summary: We begin to consider ways to analyze the running times of algorithms.
  subjects:
    - Review of complexity analysis from 301
    - Big-Oh, formalized
    - Characteristics of Big-Oh and associated proofs
  notes: ../eboards/eboard03

- topic: Asymptotic analysis, continued
  abbrev: asymptotic-analysis-continued
  summary: We continue to explore running time
  subjects:
    - Other characteristics of Big-Oh
    - Other notations (theta, little-oh)
    - Casual and careful loop counting
  notes: ../eboards/eboard04

- topic: Divide-and-conquer algorithms and structures
  abbrev: divide-and-conquer
  summary: We explore one of the important algorithm design techniques, divide and conquer.  Divide and conquer algorithms and structures achieve some efficiency by splitting the input in half.
  subjects:
    - Divide and conquer, in theory
    - Review of divide-and-conquer algorithms and structures
    - Finding the median value in an array
    - Exponentiation with integer exponents
  notes: ../eboards/eboard05

- topic: Pause for breath
  abbrev: pause01
  summary: We pause to discuss a variety of outstanding issues.
  subjects:
    - Nearest Neighbor, revisited
    - Other Roughgarden examples
  notes: ../eboards/eboard06

- topic: Asymptotic analysis and recurrence relations
  abbrev: asymptotic-analysis
  summary: We explore ways to think about the running time of divide-and-conquer algorithms.
  subjects:
    - Analyzing recursive algorithms with recurrence relations
    - Solving recurrence relations
    - Looking ahead to the master theorem
  notes: ../eboards/eboard07

- topic: "Detour: Nearest Neighbors, revisited"
  abbrev: nearest-neighbor
  summary: We delve more deeply into the nearest neighbor algorithm.
  notes: ../eboards/eboard08

- topic: Asymptotic analysis, revisited
  abbrev: asymptotic-analysis-revisited
  summary: We continue ideas from the prior class.
  subjects:
    - Nearest neighbor example
    - More practice solving recurrence relations
    - The recurrence formula theorem
  notes: ../eboards/eboard09

- topic: Binary search trees
  abbrev: bst
  summary: We continue trees in general and binary search trees in particular.
  subjects:
    - A bit more about the recurrence formula theorem
    - Trees, formalized
    - Terminology
    - Binary trees
    - Traversing trees
    - Binary search trees
    - Building balanced BSTs.
    - Balancing BSTs.
  notes: ../eboards/eboard10

- topic: Red-black trees 
  abbrev: red-black-trees
  summary: We start to consider red-black trees, one of the approaches for keeping search trees relatively balanced.
  subjects:
    - Red-black tree basics
    - Red-black tree examples
    - Insertion in red-black trees

- topic: Red-black trees, continued
  abbrev: red-black-trees-continued
  summary: We continue our exploration of red-black trees.
  subjects:
    - Deletion in binary-search trees
    - Deletion in red-black trees

- topic: Pause for breath
  abbrev: pause-05
  summary: We pause to catch up on balanced trees and other issues.
  subjects:
    - Red-black trees
    - Other balanced trees
  notes: ../eboards/eboard13

- topic: Sorting
  abbrev: sorting
  summary: We begin our consideration of one of the most common algorithmic problems, that of putting a collection of values in order.
  subjects:
    - Characteristics of sorting algorithms
    - Common sorting algorithms
  notes: ../eboards/eboard14

- topic: Lower bounds on sorting algorithms
  abbrev: lower-bounds
  summary: We consider lower bounds on comparison-based sorting algorithms.
  subjects:
    - Recap from prior class
    - Some followup questions on algorithms
    - A theorem about lower bounds
    - Proving that theorem
  notes: ../eboards/eboard15

- topic: O(n) sorting algorithms
  abbrev: fast-sorting
  summary: We consider some algorithms that achieve O(n) running time, often by limiting the input in certain ways.
  subjects:
    - A sorting exercise
    - Other strategies for sorting
    - Bucket sort
    - Radix sort
  reading:
    - Roughgarden 5.6
  notes: ../eboards/eboard16

- topic: Prep for Assignment 6
  abbrev: hw6a
  summary: We consier issues of sorting in preparation for assignment 6.
  notes: ../eboards/eboard17

- topic: More prep for Assignment 6
  abbrev: hw6b
  summary: We consier issues of sorting in preparation for assignment 6.
  notes: ../eboards/eboard18

- topic: Tries
  abbrev: tries
  summary: We explore the trie data structure.
  subjects:
    - Review of dictionaries
    - Costs of dictionary implementations
    - Tries
  notes: ../eboards/eboard19

- topic: Program verification (1)
  abbrev: verification-1
  summary: We begin to explore why and how we we use formal techniques to verify our algorithms.
  subjects:
    - Goals for this unit
    - Verifying imperative code
    - Loop invariants
    - Example - binary search
  notes: ../eboards/eboard20

- topic: Program verification (2)
  abbrev: verification-2
  summary: We consider the details of common verification mechanisms.
  subjects:
    - Example - binary search, revised
    - Example - DNF
    - Example - Efficient exponentiation with recursion
    - Example - Efficient exponentiation with iteration
  notes: ../eboards/eboard21

- topic: Program verification (3)
  abbrev: verification-3
  summary: We conclude our exploration of program verification and loop invariants.
  subjects:
    - About HW7
    - Example - Efficient exponentiation with iteration
    - Other invariants
  notes: ../eboards/eboard22

- topic: Coded Bias Watch Party
  abbrev: coded-bias
  summary: We watch "Coded Bias" in preparation for a discussion.

- topic: Implications of Coded Bias
  abbrev: coded-bias-discussion
  summary: We consider the implications of Coded Bias on our own practices as computer scientists and algorithm designers.
  notes: ../eboards/eboard24

- topic: Shortest paths
  abbrev: shortest-paths
  summary: We start our exploration of graphs by considering algorithms for computing the shortest path between nodes in a graph.
  subjects:
    - Graphs
    - The shortest-path problem
    - Dijkstra's shortest-path algorithm
    - Analyzing Dijkstra's shortest-path algorithm
    - All-pairs shortest-path algorithms
  notes: ../eboards/eboard25

- topic: Minimum spanning trees
  abbrev: mst
  summary: We consider an important class of graph algorithm, that of computing the minimum spanning tree of a graph.
  subjects:
    - Minimum spanning trees
    - Examples
    - Designing an MST algorithm
  notes: ../eboards/eboard26

- topic: Miniumum spanning trees, continued
  abbrev: mst-continued
  summary: We explore the details and proofs of correctness of some MST algorithms.
  subjects:
    - Prim's algorithm and Kruskal's algorithm
    - Efficiency
    - Proofs of correctness
  notes: ../eboards/eboard27

- topic: Sets and union-find
  abbrev: union-find
  summary: We consider an algorithm and structure that are useful in a variety of situations.
  subjects:
    - A set ADT
    - Data structure design, revisited
    - The union-find structure
    - Analyzing union find
    - Improving union-find
  notes: ../eboards/eboard28

- topic: Implementing MST algorithms
  abbrev: mst-implement
  summary: We consider how we might implement MSTs
  notes: ../eboards/eboard29

- topic: Network flows
  abbrev: network-flows-1
  summary: We explore netflork flow algorithms and their applications.
  subjects:
    - Looking back to graph algorithms
    - Network flows
  notes: ../eboards/eboard30

- topic: Network flows, continued
  abbrev: network-flows-2
  summary: We continue to explore netflork flow algorithms and their applications.
  subjects: 
    - The Ford-Fulkerson algorithm
    - Bipartite matching
    - Further applications of network flow
  notes: ../eboards/eboard31

- topic: Dynamic programming (1)
  abbrev: dynamic-programming-1
  summary: We consider another important algorithm design technique.
  subjects:
    - Fibonacci numbers
    - The stamps problem
    - The value of caching
    - Dynamic programming, generalized
  notes: ../eboards/eboard32

- topic: The return of greed
  abbrev: greed-returns
  summary: Motivated by the stamps problem, we return to greedy solutions for coins and other objects.
  subjects:
    - Greedy coins
    - The activity selection problem
    - Why prove?
    - Proofs of correctness
  notes: ../eboards/eboard33

- topic: Dynamic programming (2)
  abbrev: dynamic-programming-2
  summary: We further continue our consideration of dynamic programming
  subjects:
    - Generalizing the technique
    - Other problems
  notes: ../eboards/eboard34
   
- topic: Skip Lists (1) and Dynamic Programming (3)
  abbrev: skip-lists-1
  summary: We consider an algorithm from the literature
  subjects:
    - Introduction to skip lists
    - Knapsack, concluded
    - Edit distance
  notes: ../eboards/eboard35

- topic: Dynamic programming (4)
  abbrev: dynamic-programming-4
  summary: We conclude our initial exploration of dynamic programming.
  subjects:
    - Edit distance, continued
    - Variations of edit distance
  notes: ../eboards/eboard36

- topic: Skip Lists (2)
  abbrev: skip-lists-2
  summary: We return to an algorithm from the literature

- topic: Topological sort
  abbrev: topological-sort
  summary: We catch up on a missed topic

- topic: Basics of string matching
  abbrev: string-matching basics
  summary: We consider some basic issues in string matching algorithms
  subjects:
    - Approximate substring matching
    - Exact substring matching
    - The brute-force approach
    - The hash-code approach

- topic: Improved string-matching algorithms
  abbrev: string-matching-improved
  summary: We continue to explore string-matching algorithms
  subjects: 
    - The hash-code approach
    - Keeping track of look-ahead
    - Building the table

- topic: Wrapup
  abbrev: wrapup

- topic: Evaluate and debrief
  abbrev: debrief
